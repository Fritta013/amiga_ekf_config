
#to transform global gps data to gps coordinates transformed into robot world coordinate frame 
#subscribes to output of ekf/ukf_node, imu data, and global gps data 
#publishes gps/filtered and odometry/gps 
#to do!!
#use /gps/filtered for testing 
#check magnetic_declination_radians and yaw_offset
#change datum to specific values 

navsat_transform_node:
    ros__parameters:
      frequency: 30.0  #change if needed 
      use_odometry_yaw: false #no wheel encoders (only imu sensors)
      delay: 0 #because use_odometry_yaw set to false
      # If this is true, all received odometry data is converted back to a lat/lon and published as a NavSatFix message as
      # /gps/filtered. Defaults to false
      #use for visualization!!
      publish_filtered_gps: true #publish filtered gps data in lat/lon to /gps/filtered
      # If your IMU does not account for magnetic declination, enter the value for your location here
      magnetic_declination_radians: 0.2216568 #check imu!!
      # Your IMU's yaw, once the magentic_declination_radians value is added to it, should report 0 when facing east. If it
      # doesn't, enter the offset here. Defaults to 0.
      yaw_offset: -0.5 #test imu east!!
      # If this is true, the altitude is set to 0 in the output odometry message. Defaults to false.
      zero_altitude: true
      # If this is true, the transform world_frame->utm transform is broadcast for use by other nodes. Defaults to false.
      broadcast_utm_transform: true #to broadcast utm > world frame 
      # If this is true, the utm->world_frame transform will be published instead of the world_frame->utm transform. 
      # Note that broadcast_utm_transform still has to be enabled. Defaults to false.
      broadcast_utm_transform_as_parent_frame: false
      # If this is true, the node ignores the IMU data and gets its heading from the odometry source (typically the
      # /odometry/filtered topic coming from one of robot_localization's state estimation nodes). BE CAREFUL when using this!
      # The yaw value in your odometry source *must* be world-referenced, e.g., you cannot use your odometry source for yaw
      # if your yaw data is based purely on integrated velocities. Defaults to false.
      use_odometry_yaw: false
      # If true, will retrieve the datum from the 'datum' parameter below, if available. If no 'datum' parameter exists,
      # navsat_transform_node will wait until the user calls the 'datum' service with the SetDatum service message.
      wait_for_datum: true #datum should be predefined 

      # Instead of using the first GPS location and IMU-based heading for the local-frame origin, users can specify the
      # origin (datum) using this parameter. The fields in the parameter represent latitude and longitude in decimal degrees,
      # and heading in radians. As navsat_transform_node assumes an ENU standard, a 0 heading corresponds to east.
      #WGS84 format: latitude, longitude, altitude
      datum: [37.364491, -120.423234, 0.0] #latitude longitude retrived from maps 